#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var db = require('../db/db.fun.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//导入scoket.io
var socketIO = require("socket.io");
var io = new socketIO.Server(server,{cors:true});
let onlineUsers = {};  //上线的用户

io.on("connection",(socket)=>{   //socket:当前连接的客户端socket实例
  socket.on("onLine",function(uid){
    onlineUsers["u"+uid] = socket.id;
  })
  //接受客户端发送的信息
  socket.on("onMsg",function(data){
    //console.log(data);
    //将信息反推到发送者和接收者客户端
    io.to(onlineUsers["u"+data.uid]).emit("receiveMsg",data);
    io.to(onlineUsers["u"+data.fid]).emit("receiveMsg",data);
    data.systime=new Date().getTime()
    //保存数据到数据库
    db.add("chatmsg",data).then(data=>{
      console.log(data);
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
